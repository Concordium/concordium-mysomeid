{"version":3,"file":"writeShareExtensionFiles.js","sourceRoot":"","sources":["../../src/android/writeShareExtensionFiles.ts"],"names":[],"mappings":"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","sourcesContent":["import path from \"node:path\";\nimport fs from \"node:fs\";\nimport plist from \"@expo/plist\";\n\nimport {\n  shareExtensionName,\n  getAppGroups,\n  shareExtensionEntitlementsFileName,\n  shareExtensionInfoFileName,\n  shareExtensionStoryBoardFileName,\n  shareExtensionViewControllerFileName,\n} from \"./constants\";\n\nexport async function writeShareExtensionFiles(\n  platformProjectRoot: string,\n  scheme: string,\n  appIdentifier: string\n) {\n  const infoPlistFilePath = getShareExtensionInfoFilePath(platformProjectRoot);\n  const infoPlistContent = getShareExtensionInfoContent();\n  await fs.promises.mkdir(path.dirname(infoPlistFilePath), { recursive: true });\n  await fs.promises.writeFile(infoPlistFilePath, infoPlistContent);\n\n  const entitlementsFilePath =\n    getShareExtensionEntitlementsFilePath(platformProjectRoot);\n  const entitlementsContent =\n    getShareExtensionEntitlementsContent(appIdentifier);\n  await fs.promises.writeFile(entitlementsFilePath, entitlementsContent);\n\n  const storyboardFilePath =\n    getShareExtensionStoryboardFilePath(platformProjectRoot);\n  const storyboardContent = getShareExtensionStoryBoardContent();\n  console.log(\"creating story board file :\", storyboardFilePath);\n  await fs.promises.writeFile(storyboardFilePath, storyboardContent);\n\n  const viewControllerFilePath =\n    getShareExtensionViewControllerPath(platformProjectRoot);\n  const viewControllerContent = getShareExtensionViewControllerContent(scheme);\n  await fs.promises.writeFile(viewControllerFilePath, viewControllerContent);\n}\n\n//: [root]/ios/ShareExtension/ShareExtension-Entitlements.plist\nexport function getShareExtensionEntitlementsFilePath(\n  platformProjectRoot: string\n) {\n  return path.join(\n    platformProjectRoot,\n    shareExtensionName,\n    shareExtensionEntitlementsFileName\n  );\n}\n\nexport function getShareExtensionEntitlements(appIdentifier: string) {\n  return {\n    \"com.apple.security.application-groups\": getAppGroups(appIdentifier),\n  };\n}\n\nexport function getShareExtensionEntitlementsContent(appIdentifier: string) {\n  return plist.build(getShareExtensionEntitlements(appIdentifier));\n}\n\n//: [root]/ios/ShareExtension/ShareExtension-Info.plist\nexport function getShareExtensionInfoFilePath(platformProjectRoot: string) {\n  return path.join(\n    platformProjectRoot,\n    shareExtensionName,\n    shareExtensionInfoFileName\n  );\n}\n\nexport function getShareExtensionInfoContent() {\n  return plist.build({\n    CFBundleName: \"$(PRODUCT_NAME)\",\n    CFBundleDisplayName: \"Share Extension\",\n    CFBundleIdentifier: \"$(PRODUCT_BUNDLE_IDENTIFIER)\", //\n    CFBundleDevelopmentRegion: \"$(DEVELOPMENT_LANGUAGE)\",\n    CFBundleExecutable: \"$(EXECUTABLE_NAME)\",\n    CFBundleInfoDictionaryVersion: \"6.0\",\n    CFBundlePackageType: \"$(PRODUCT_BUNDLE_PACKAGE_TYPE)\",\n    NSExtension: {\n      NSExtensionAttributes: {\n        /* NSExtensionActivationRule: {\n          NSExtensionActivationSupportsWebURLWithMaxCount: 1,\n          NSExtensionActivationSupportsWebPageWithMaxCount: 1,\n        },*/\n        NSExtensionActivationRule: \"TRUEPREDICATE\",\n      },\n      NSExtensionMainStoryboard: \"MainInterface\",\n      NSExtensionPointIdentifier: \"com.apple.share-services\",\n    },\n  });\n}\n\n//: [root]/ios/ShareExtension/ShareExtension-Info.plist\nexport function getShareExtensionStoryboardFilePath(\n  platformProjectRoot: string\n) {\n  return path.join(\n    platformProjectRoot,\n    shareExtensionName,\n    shareExtensionStoryBoardFileName\n  );\n}\n\nexport function getShareExtensionStoryBoardContent() {\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <document type=\"com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB\" version=\"3.0\" toolsVersion=\"13122.16\" targetRuntime=\"iOS.CocoaTouch\" propertyAccessControl=\"none\" useAutolayout=\"YES\" useTraitCollections=\"YES\" useSafeAreas=\"YES\" colorMatched=\"YES\" initialViewController=\"j1y-V4-xli\">\n      <dependencies>\n          <plugIn identifier=\"com.apple.InterfaceBuilder.IBCocoaTouchPlugin\" version=\"13104.12\"/>\n          <capability name=\"Safe area layout guides\" minToolsVersion=\"9.0\"/>\n          <capability name=\"documents saved in the Xcode 8 format\" minToolsVersion=\"8.0\"/>\n      </dependencies>\n      <scenes>\n          <!--Share View Controller-->\n          <scene sceneID=\"ceB-am-kn3\">\n              <objects>\n                  <viewController id=\"j1y-V4-xli\" customClass=\"ShareViewController\" customModuleProvider=\"target\" sceneMemberID=\"viewController\">\n                      <view key=\"view\" opaque=\"NO\" contentMode=\"scaleToFill\" id=\"wbc-yd-nQP\">\n                          <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"375\" height=\"667\"/>\n                          <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" heightSizable=\"YES\"/>\n                          <color key=\"backgroundColor\" red=\"0.0\" green=\"0.0\" blue=\"0.0\" alpha=\"0.0\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n                          <viewLayoutGuide key=\"safeArea\" id=\"1Xd-am-t49\"/>\n                      </view>\n                  </viewController>\n                  <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"CEy-Cv-SGf\" userLabel=\"First Responder\" sceneMemberID=\"firstResponder\"/>\n              </objects>\n          </scene>\n      </scenes>\n  </document>\n  `;\n}\n\n//: [root]/ios/ShareExtension/ShareViewController.swift\nexport function getShareExtensionViewControllerPath(\n  platformProjectRoot: string\n) {\n  return path.join(\n    platformProjectRoot,\n    shareExtensionName,\n    shareExtensionViewControllerFileName\n  );\n}\n\nexport function getShareExtensionViewControllerContent(scheme: string) {\n  console.debug(\"************ scheme\", scheme);\n\n  return `import UIKit\nimport Social\nimport MobileCoreServices\n\nclass ShareViewController: UIViewController {\n    // IMPORTANT: This should be your host app scheme\n    let hostAppURLScheme = \"${scheme}\"\n    let urlContentType = kUTTypeURL as String\n    let textContentType = kUTTypePlainText as String\n    \n    override func viewDidLoad() {\n        \n        var strUrl:String? = nil\n        DispatchQueue.global().async {\n            \n            \n            if let content = self.extensionContext!.inputItems[0] as? NSExtensionItem {\n                if let contents = content.attachments {\n                    for (_, attachment) in (contents).enumerated() {\n                        if attachment.hasItemConformingToTypeIdentifier(self.urlContentType) {\n                            let _strUrl = self.getStrUrlFromUrl(attachment: attachment)\n                            if(_strUrl != nil){\n                                strUrl = _strUrl\n                            }\n                        }\n                        \n                        if attachment.hasItemConformingToTypeIdentifier(self.textContentType) {\n                            if(strUrl != nil){\n                                continue;\n                            }\n                            let    _strUrl = self.getStrUrlFromText(attachment: attachment)\n                            if(_strUrl != nil){\n                                strUrl = _strUrl\n                            }\n                            \n                        }\n                    }\n                }\n            }\n            \n            if(strUrl == nil){\n                self.dismissWithError()\n                return;\n            }\n            self.redirectToHostApp(sharedURL: strUrl!)\n        }\n    }\n    \n    \n    private func getStrUrlFromUrl ( attachment: NSItemProvider) -> String? {\n        var result:String? = nil\n        \n        let semaphore = DispatchSemaphore(value: 0)\n        \n        attachment.loadItem(forTypeIdentifier: self.urlContentType, options: nil) { data, error in\n            \n            if error == nil, let item = data as? URL {\n                let _url = URL(string: item.absoluteString)\n                if(_url != nil){\n                    result = item.absoluteString\n                }\n            }\n            semaphore.signal()\n        }\n        \n        semaphore.wait()\n        \n        return result\n    }\n    \n    private func getStrUrlFromText ( attachment: NSItemProvider) -> String? {\n        var result:String? = nil\n        \n        let semaphore = DispatchSemaphore(value: 0)\n        \n        attachment.loadItem(forTypeIdentifier: self.textContentType, options: nil) { data, error in\n            \n            if error == nil, let item = data as? String {\n                \n                let types: NSTextCheckingResult.CheckingType = [.link]\n                let detector = try? NSDataDetector(types: types.rawValue)\n                \n                if  detector != nil && item.count > 0 && detector!.numberOfMatches(in: item, options: NSRegularExpression.MatchingOptions(rawValue: 0), range: NSMakeRange(0, item.count)) > 0 {\n                    result = item\n                }\n                \n            }\n            semaphore.signal()\n        }\n        \n        semaphore.wait()\n        \n        \n        return result\n    }    \n    \n    private func dismissWithError() {\n        self.dismiss(animated: true, completion: nil)\n        extensionContext!.completeRequest(returningItems: [], completionHandler: nil)\n    }\n    \n    private func redirectToHostApp(sharedURL: String) {\n        var urlComponents = URLComponents()\n        urlComponents.scheme = hostAppURLScheme\n        urlComponents.host = \"share\"\n        urlComponents.path = \"/\"\n        urlComponents.queryItems = [\n            URLQueryItem(name: \"url\", value: sharedURL),\n        ]\n        // urlComponents.url: \\(scheme)://share/?url=\\(sharedURL)\n        let url = urlComponents.url\n        var responder = self as UIResponder?\n        let selectorOpenURL = sel_registerName(\"openURL:\")\n        \n        while (responder != nil) {\n            if (responder?.responds(to: selectorOpenURL))! {\n                responder?.perform(selectorOpenURL, with: url)\n            }\n            responder = responder!.next\n        }\n        extensionContext!.completeRequest(returningItems: [], completionHandler: nil)\n    }\n}\n`;\n}\n"]}