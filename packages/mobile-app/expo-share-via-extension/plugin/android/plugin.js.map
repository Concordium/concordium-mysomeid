{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../src/android/plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidManifest,\n  // withProjectBuildGradle,\n  withMainActivity,\n  withMainApplication,\n} from \"@expo/config-plugins\";\nimport { ManifestActivity } from '@expo/config-plugins/build/android/Manifest';\n\n// // package com.krismort.asdasd.share;\nconst codeMessagesModule = (packageLine: string) => `${packageLine}\\n\nimport androidx.annotation.NonNull;\nimport com.facebook.react.bridge.Arguments;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.bridge.ReactContextBaseJavaModule;\nimport com.facebook.react.bridge.ReactMethod;\nimport com.facebook.react.modules.core.DeviceEventManagerModule;\nimport com.facebook.react.bridge.WritableMap;\\n\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Timer;\nimport java.util.TimerTask;\\n\npublic class MessagesModule extends ReactContextBaseJavaModule {\n    static MessagesModule instance;\\n\n    public interface GetInstanceCallback {\n        void onInstance(MessagesModule inst);\n    }\\n\n    static void getInstance(GetInstanceCallback cb) {\n        Timer timer = new Timer();\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                if ( MessagesModule.instance == null ) {\n                    // Wait until the messages module is initialised.\n                    return;\n                }\n                timer.cancel();\n                cb.onInstance(MessagesModule.instance);\n            }\n        };\n        timer.schedule(timerTask, 0, 10);\n    }\\n\n    static void handleIntent(String action, String type, String extraText) {\n      MessagesModule.getInstance( new MessagesModule.GetInstanceCallback() {\n        @Override\n        public void onInstance(MessagesModule inst) {\n          WritableMap params = Arguments.createMap();\n          params.putString(\"action\", action);\n          params.putString(\"type\", type);\n          params.putString(\"extra_text\", extraText);\n          MessagesModule.instance.sendMessage(\"intent\", params);\n        }\n      });\n    }\\n\n    private ReactApplicationContext reactContext;\\n\n    private boolean ready = false;\\n\n    private class MessagesObject {\n        public String typeName;\n        public WritableMap params;\\n\n        public MessagesObject(String typeName, WritableMap params) {\n            this.typeName = typeName;\n            this.params = params;\n        }\n    }\\n\n    private Queue<MessagesObject> messageQueue = new LinkedList<MessagesObject>();\\n\n    public MessagesModule(ReactApplicationContext reactContext) {\n        super(reactContext);\n        this.reactContext = reactContext;\n        MessagesModule.instance = this;\n    }\\n\n    public void sendMessage(String type, WritableMap params ) {\n        if ( !this.ready ) {\n            messageQueue.add(new MessagesObject(type, params));\n            return;\n        }\n        this.reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)\n            .emit(type, params);\n    }\\n\n    @NonNull\n    @Override\n    public String getName() {\n        return \"MessagesModule\";\n    }\\n\n    @ReactMethod\n    public void setReady() {\n        if ( !this.ready ) {\n            for (MessagesObject messagesObject : this.messageQueue) {\n                this.reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)\n                        .emit(messagesObject.typeName, messagesObject.params);\n            }\n            this.messageQueue.clear();\n        }\n        this.ready = true;\n    }\\n\n    @ReactMethod\n    public void setNotReady() {\n        this.ready = true;\n    }\n}\\n`;\n\nconst codeMessagesPackage = (packageLine: string) => `${packageLine}\\n\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.uimanager.ViewManager;\\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\\n\npublic class MessagesPackage implements ReactPackage {\n  @Override\n  public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {\n    List<NativeModule> modules = new ArrayList<>();\n    modules.add(new MessagesModule(reactContext));\n    return modules;\n  }\\n\n  @Override\n  public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {\n    return Collections.emptyList();\n  }\n}\\n`;\n\nfunction insertAfterText(contents: string, searchFor: string, insertAfter: string): string {\n  const indexFound = contents.indexOf(searchFor);\n  if ( indexFound === -1 ) {\n    throw new Error('Import not found');\n  }\n  const index = indexFound + searchFor.length;\n  contents = contents.substring(0, index) + insertAfter + contents.substring(index);\n  return contents;\n}\n\nfunction cursorBefore(contents: string, args: {searchFor: RegExp, cursor: number}): {pos: number, text: string} {\n  const {searchFor, cursor} = args;\n  if ( cursor > contents.length ) {\n    throw new Error('Invalid offset');\n  }\n\n  const tmp = contents.substring(cursor) ?? '';\n  const idx = tmp.search(searchFor);\n  const m = tmp.match(searchFor);\n\n  if ( !m || idx === -1 ) {\n    console.log(\"searching in text : \" + tmp);\n    throw new Error('Not found : ->' + searchFor + '<-');\n  }\n\n  const pos = cursor + idx;\n\n  return {\n    pos,\n    text: contents,\n  };\n}\n\nfunction cursorAfter(contents: string, args: {searchFor: RegExp, cursor: number}): {pos: number, text: string} {\n  const {searchFor, cursor} = args;\n  if ( cursor > contents.length ) {\n    throw new Error('Invalid offset');\n  }\n\n  const tmp = contents.substring(cursor) ?? '';\n  const idx = tmp.search(searchFor);\n  const m = tmp.match(searchFor);\n\n  if ( !m || idx === -1 ) {\n    throw new Error('Not found');\n  }\n\n  const pos = cursor + idx + m[0].length;\n\n  return {\n    pos,\n    text: contents,\n  };\n}\n\nfunction insertText(contents: string, args: {text: string, cursor: number}): {pos: number, text: string} {\n  const {text, cursor} = args;\n  if ( cursor > contents.length ) {\n    throw new Error('Invalid offset');\n  }\n\n  if ( !text ) {\n    return {\n      pos: cursor,\n      text,\n    };\n  }\n\n  return {\n    pos: cursor + text.length,\n    text: contents.substring(0, cursor) + text + contents.substring(cursor),\n  };\n}\n\nexport const withAndroidPlugin: ConfigPlugin = (config) => {\n  config = withAndroidManifest(config, config => {\n    const mainApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(config.modResults);\n    const activity: ManifestActivity | null = mainApplication?.activity?.find(x => x.$['android:name'] === '.MainActivity') ?? null;\n\n    if ( !activity ) {\n      throw new Error('Failed to find Main activity');\n    }\n\n    // Add intent filter;\n    /*<intent-filter>\n        <action android:name=\"android.intent.action.SEND\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <data android:mimeType=\"text/uri-list\" />\n        <data android:mimeType=\"text/x-uri\" />\n        <data android:mimeType=\"text/plain\"/>\n      </intent-filter>*/\n    activity['intent-filter'] = [\n      {\n        action: [{$: {'android:name': \"android.intent.action.SEND\"}}],\n        category: [{$: {'android:name': \"android.intent.category.DEFAULT\"}}],\n        data: [\n          {$: {'android:mimeType': \"text/plain\"}},\n          {$: {'android:mimeType': \"text/x-uri\"}},\n          {$: {'android:mimeType': \"text/uri-list\"}},\n        ],\n      },\n      ...(activity['intent-filter'] ?? []),\n    ];\n\n    return config;\n  });\n\n  // Write files\n  config = withMainActivity(config, config => {\n    const platformProjectRoot = config.modRequest.platformProjectRoot;\n    let packageName: string | null = config.android?.package ?? null;\n    if ( !packageName ) {\n      throw new Error('No package name availble for Android project.');\n    }\n    // packageName = packageName ?? 'package com.krismort.asdasd;';\n\n    console.log(config.modRequest);\n\n    console.log(\"Project root\", platformProjectRoot);\n    const dir = path.join(platformProjectRoot, 'app', 'src', 'main', 'java', ...packageName.split('.'));\n    console.log(\"Files dir \" + dir);\n\n    try {\n      fs.mkdirSync(dir, {});\n    } catch(e) {\n      if (e.message?.indexOf('already exists') === -1 ) {\n        console.error(e);\n      }\n    }\n\n    const packageLine = `package ${packageName};`;\n\n    const fnMessagesModule = path.join(dir, 'MessagesModule.java');\n    console.log(\"Creating file : \" + fnMessagesModule);\n    fs.writeFileSync(fnMessagesModule, codeMessagesModule(packageLine));\n\n    const fnMessagesPackage = path.join(dir, 'MessagesPackage.java');\n    console.log(\"Creating file : \" + fnMessagesPackage);\n    fs.writeFileSync(fnMessagesPackage, codeMessagesPackage(packageLine));\n\n    let contents = config.modResults.contents;\n\n    \n      \n    if ( contents.indexOf('MessagesModule') === -1 ) {    \n      let cursor = {\n        pos: 0,\n        text: contents,\n      };\n\n      if (contents.indexOf('onNewIntent') >= 0 ) {\n        throw new Error('onNewIntent already present');\n      }\n      \n      if ( cursor.text.indexOf('import expo.modules.BuildConfig;') === -1 ) {\n        cursor = cursorAfter(cursor.text, {searchFor: /import expo.modules.ReactActivityDelegateWrapper;/gmi, cursor: cursor.pos});\n        cursor = insertText(cursor.text, {text: `\\nimport expo.modules.BuildConfig;`, cursor: cursor.pos});\n      }\n\n      cursor = cursorBefore(cursor.text, {searchFor: /super.onCreate\\(null\\);/gmi, cursor: cursor.pos});\n      cursor = insertText(cursor.text, {text: `\\n\n    /* MessagesModule */\n    android.content.Intent intent = getIntent(); \n    String action = intent.getAction();\n    String type = intent.getType();\n    String extraText = intent.getStringExtra(android.content.Intent.EXTRA_TEXT);\n    MessagesModule.handleIntent(action, type, extraText);\\n\\n    `, cursor: cursor.pos});\n      cursor = cursorAfter(cursor.text, {searchFor: /super.onCreate\\(null\\);/gmi, cursor: cursor.pos});\n      cursor = cursorAfter(cursor.text, {searchFor: /\\}/gmi, cursor: cursor.pos});\n      cursor = cursorAfter(cursor.text, {searchFor: /\\n|\\r\\n/gmi, cursor: cursor.pos});\n      cursor = insertText(cursor.text, {cursor: cursor.pos, text: `\\n\n  /* MessagesModule */\n  @Override\n  public void onNewIntent(android.content.Intent intent) {\n    super.onNewIntent(intent);\n    String action = intent.getAction();\n    String type = intent.getType();\n    String extraText = intent.getStringExtra(android.content.Intent.EXTRA_TEXT);\n    MessagesModule.handleIntent(action, type, extraText);\n  }\n`});\n      config.modResults.contents = cursor.text;\n    }\n  \n    return config;\n  });\n\n  config = withMainApplication(config, config => {\n    let contents = config.modResults.contents;\n\n    /*const toAdd = 'import com.alinz.parkerdan.shareextension.SharePackage;';\n    contents = contents.indexOf(toAdd) === -1 ? insertAfterText(\n      contents,\n      'import java.util.List;',\n      `\\n\\n${toAdd}\\n`\n    ) : contents;*/\n\n    const pckLine = '\\t\\t\\t\\tpackages.add(new MessagesPackage());';\n    contents = contents.indexOf(pckLine) === -1 ? insertAfterText(\n      contents,\n      `List<ReactPackage> packages = new PackageList(this).getPackages();`,\n      `\\n${pckLine}\\n`\n    ) : contents;\n\n    config.modResults.contents = contents;\n    return config;\n  });\n\n  return config;\n};\n"]}